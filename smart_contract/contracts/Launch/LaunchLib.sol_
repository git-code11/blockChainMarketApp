pragma solidity 0.8.15;
//SPDX-License-Identifier: UNLICENSED

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

library LaunchPadLib{
    using SafeMath for uint256;
    /** 
     * capped amount => fund to be raised
     * dexBps => percentage of funds raised to be used for liquidity
     * Add percent fee of raised amount as token to be bought
     */
    
   function tokenAmount(
    uint256 capped_,
    uint256 saleRate_,
    uint256 dexRate_,
    uint16 dexBps_,
    uint16 bnbFeeBps_,
    uint16 tkFeeBps_)
    internal pure
    returns (uint256[] memory)
    {
        uint256[] memory result = new uint256[](4);
        
        //saleTokens
        result[0] = capped_.mul(saleRate_);

        //dexTokens
        result[1] = capped_.mul(dexBps_).mul(dexRate_).div(10000);
        
        //feeTokensForBnBFee 
        result[2] = capped_.mul(bnbFeeBps_).div(saleRate_).div(10000);

        //feeTokensForTokenFee
        result[3] = result[0].mul(tkFeeBps_).div(10000);

        return result;
    }

    
    function tokenAmountRatio(
    uint256 newCapped_,
    uint256 capped_,
    uint256 saleRate_,
    uint256 dexRate_,
    uint16 dexBps_,
    uint16 bnbFeeBps_,
    uint16 tkFeeBps_)
    internal pure
    returns (uint256[] memory)
    {   
        
        uint256[] memory amounts = tokenAmount(
                                                capped_,
                                                saleRate_,
                                                dexRate_,
                                                dexBps_,
                                                bnbFeeBps_,
                                                tkFeeBps_);

        
        uint256[] memory result = new uint256[](5);
        uint256 divider = result[0] + result[1] + result[2];

        //saleTokens
        for(uint i = 0; i < 3; i++){
            result[i] = amounts[i].mul(newCapped_).div(divider);
        }

        result[3] = result[0].mul(amounts[3]).div(capped_);
        
        return result;
    }
    
    function amountOut(uint256 amountIn, uint256 rate) internal pure returns (uint256){
        return amountIn.div(rate);
    }

}